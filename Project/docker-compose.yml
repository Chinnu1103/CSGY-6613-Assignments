version: "3.6"
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    restart: unless-stopped
    depends_on:
      - mongo
      - qdrant
      - apiserver
    volumes:
      - ./app:/usr/src/app
    ports:
      - "5000:5000"
    environment:
      MONGO_URI: mongodb://mongo:27017/your_database
      QDRANT_URI: http://qdrant:6333
      CLEARML_API_HOST: http://localhost:8008
      CLEARML_WEB_HOST: http://localhost:8080
      CLEARML_FILES_HOST: http://localhost:8081
      CLEARML_WORKER_ID: "clearml-services"
      CLEARML_API_ACCESS_KEY: 9FM3YI6YZSM7314FWQ8YUZXSMMXP1T
      CLEARML_API_SECRET_KEY: dO7HXJg9NbK2Tx7curOyL3S24Y9SbCb7SOewloik5KLvj4fsMS_8owW494MYJfLdZzY
      GITHUB_TOKEN: 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
    networks:
      - backend

  mongo:
    image: mongo:5.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data/db
    networks:
      - backend

  qdrant:
    image: qdrant/qdrant:v1.3.0
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - ./data/qdrant:/qdrant/storage
    networks:
      - backend

  # ClearML services
  apiserver:
    command:
      - apiserver
    container_name: clearml-apiserver
    image: allegroai/clearml:latest
    restart: unless-stopped
    volumes:
      - ./clearml/logs:/var/log/clearml
      - ./clearml/config:/opt/clearml/config
      - ./clearml/data/fileserver:/mnt/fileserver
    depends_on:
      - redis
      - mongo
      - elasticsearch
      - fileserver
    environment:
      CLEARML_ELASTIC_SERVICE_HOST: elasticsearch
      CLEARML_ELASTIC_SERVICE_PORT: 9200
      CLEARML_MONGODB_SERVICE_HOST: mongo
      CLEARML_MONGODB_SERVICE_PORT: 27017
      CLEARML_REDIS_SERVICE_HOST: redis
      CLEARML_REDIS_SERVICE_PORT: 6379
      CLEARML_SERVER_DEPLOYMENT_TYPE: linux
      CLEARML__apiserver__pre_populate__enabled: "true"
      CLEARML__apiserver__pre_populate__zip_files: "/opt/clearml/db-pre-populate"
      CLEARML__apiserver__pre_populate__artifacts_path: "/mnt/fileserver"
      CLEARML__services__async_urls_delete__fileserver__url_prefixes: "[http://localhost:8081]"
      CLEARML__secure__credentials__services_agent__user_key: 9FM3YI6YZSM7314FWQ8YUZXSMMXP1T
      CLEARML__secure__credentials__services_agent__user_secret: dO7HXJg9NbK2Tx7curOyL3S24Y9SbCb7SOewloik5KLvj4fsMS_8owW494MYJfLdZzY
    ports:
      - "8008:8008"
    networks:
      - backend

  elasticsearch:
    container_name: clearml-elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.18
    restart: unless-stopped
    environment:
      discovery.type: single-node
      node.name: clearml
      cluster.name: clearml
      reindex.remote.whitelist: "'*.*'"
    volumes:
      - ./clearml/data/elastic:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 1024M
    networks:
      - backend

  fileserver:
    container_name: clearml-fileserver
    image: allegroai/clearml:latest
    command: fileserver
    restart: unless-stopped
    volumes:
      - ./clearml/logs:/var/log/clearml
      - ./clearml/data/fileserver:/mnt/fileserver
    ports:
      - "8081:8081"
    networks:
      - backend

  redis:
    image: redis:6.2
    container_name: clearml-redis
    restart: unless-stopped
    volumes:
      - ./clearml/data/redis:/data
    networks:
      - backend

  webserver:
    container_name: clearml-webserver
    image: allegroai/clearml:latest
    command: webserver
    depends_on:
      - apiserver
    restart: unless-stopped
    ports:
      - "8080:80"
    networks:
      - backend
  
  selenium:
    image: selenium/standalone-chrome
    ports:
    - 4444:4444
    - 7900:7900
    networks:
      - backend
  
  ollama:
    image: ollama/ollama
    container_name: ollama-server
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    runtime: nvidia
    networks:
      - backend

networks:
  backend:
    driver: bridge